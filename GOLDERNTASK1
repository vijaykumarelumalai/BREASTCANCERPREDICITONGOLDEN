import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


data = pd.read_csv("/content/data.csv");

data.head()

data.sample(10)

data.columns

print(data)


data.shape

data.diagnosis.unique()

data.drop('id',axis=1,inplace=True)
data.head(1)

df=pd.DataFrame(data)

fig, ax = plt.subplots(1)
for i in range(1):
    x=df['Radius_mean']
    y=df['area_mean']
    ax.scatter(x,y, label=str(i))
    ax.set_title('Correlation of Radius_mean and area_mean with correlation .99 or r-square= .81')
fig.savefig('scatter.png')
    

fig, ax = plt.subplots(1)
for j in range(1):
    x=df['perimeter_mean']
    y=df['perimeter_se']
    ax.scatter(x,y, label=str(j))
    ax.set_title('Correlation of the mean of concavity and worst compactness')
fig.savefig('scatter.png')

# How many cases are included in the dataset
length = len(data)

# How many features are in the dataset
features = data.shape[1] - 1

# Number of malignant cases
malignant = len(data[data['area_se'] == 'P'])

# Number of benign cases
benign = len(data[data['perimeter_mean'] == 'E'])

# Rate of malignant tumors over all cases
rate = (float(malignant) / length) * 100

print("There are " + str(len(data)) + " cases in this dataset")
print("There are {} features in this dataset".format(features))
print("There are {} cases diagnosed as malignant tumor".format(malignant))
print("There are {} cases diagnosed as benign tumor".format(benign))
print("The percentage of malignant cases is: {:.4f}%".format(rate))


import seaborn as sns
from sklearn.datasets import load_breast_cancer


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC

# Separating all the features that are helpful in determining the diagnosis
features = list(data.columns[1:30])
print(features)


from sklearn.metrics import accuracy_score, classification_report

data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
Y = pd.Series(data.target)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

clf = SVC(kernel='linear', C=1)
clf.fit(X_train, Y_train)


Y_pred = clf.predict(X_test)

accuracy = accuracy_score(Y_test, Y_pred)
report = classification_report(Y_test, Y_pred)

print("Accuracy:", accuracy)
print("\nClassification Report:\n", report)


sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

sns.heatmap(pd.crosstab(Y_test, Y_pred, rownames=['Actual'], colnames=['Predicted']), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix Heatmap')
plt.show()

plt.figure(figsize=(12, 6))
plt.barh(data.feature_names, clf.coef_[0], color='skyblue')
plt.xlabel('Coefficient Value')
plt.ylabel('Feature Name')
plt.title('Feature Importance (Coefficient Values)')
plt.show()

pairplot_data = X.copy()
pairplot_data['Target'] = Y
sns.pairplot(pairplot_data, hue='Target', vars=data.feature_names[:5])
plt.show()
